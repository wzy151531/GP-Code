const w = [0.5390189189443967, -0.18895000304559068, 0.2432907411759722, -0.6019879243056374, -0.5620097701995677, -13.261537005670945, 0.38539798747132686, 0.060181156774453994, -0.23456380032023522, -8.810646035319381, 0.3375431754016972, -0.369740661747797, 0.9215358768457766, -2.6342144791049584, 0.44307436432251845, -0.43573127388218863, -0.41135296676117317, 1.1352784406297176, 0.07687656832992554, -0.006252239804407648, -0.522630174523778, 7.343138441492857, 0.2029850288691701, -0.8251641926293135, -0.7755091325376454, 2.3932796947008286, 0.5528793001606948, -0.5221839686837588, -0.26827498459877347, 1.493201089602062, 0.8293517962510464, -1.1403576740193215, -0.3554746376569312, 1.4120913610867076, -1.871994021407766, -0.8859255181222428, 0.6992731749654824, -1.4745948019491097, -1.2394901193038146, -2.7726153891106455, -3.107186125803128, 0.6316708427983606, 0.017096719508020948, -0.4771665342517072, 0.047051581058849344, 0.7862129564896522, 2.149742293800958, 1.3609647921690093, -0.2790125232482706, -0.2909109615687663, -0.10014967529416534, -0.4625961192159017, -0.467365151372763, 0.05321468617569085, 0.24987765682498944, 0.004627364015277532, 0.0, 0.25797554385172433, 0.11105673636666051, 0.037018912122220256, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16542826354616993, 0.049744163164233905, 0.009254728030555064, 0.001156841003819383, 0.0, 0.021979979072568538, 0.0, 0.0, 0.0, 0.001156841003819383, 0.0, 0.001156841003819383, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01272525104201298, 0.0, 0.0, 0.0, 0.0, 0.28111236392811223, 0.25450502084026727, 0.009254728030555064, 0.001156841003819383, 0.14807564848888102, 0.23715240578297736, 0.009254728030555064, 0.001156841003819383, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29383761497013017, 0.29499445597394985, 0.29383761497013017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09254728030554993, 0.0, 0.09254728030554993, 0.0, 0.002313682007638766, 0.0, 0.05784205019096993, 0.0, 0.0, 0.0, 0.0057842050190968705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001156841003819383, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07403782424444051, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.205917698679848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
const b = 0.2949944559739435;

let returnInt = (element) => {
    return parseInt(element, 16);
};

let sigmoid = (z) => {
    return 1 / (1 + Math.exp(-z));
};

let getFullNum = (num) => {
    //处理非数字
    if (isNaN(num)) {
        return num
    }
    //处理不需要转换的数字
    let str = '' + num;
    if (!/e/i.test(str)) {
        return num;
    }
    return (num).toFixed(18).replace(/\.?0+$/, "");
};

let matchingFeature = (realData) => {
    // 将此次识别到的指纹特征值与每一个模板都组成一次analyseData
    let analyseData = `${realData}`;
    // 将analyseData通过' '由字符串分割成数组
    let analyseArray = analyseData.split(' ');
    // 将analyseArray中字符转换成可计算数字
    analyseArray = analyseArray.map(returnInt);
    // 通过logistic回归(z=wx+b)算出z
    let z = 0;
    // 将此次组成的analyseData与之前训练得到的数据进行计算
    // console.log(`analyseArray.length = ${analyseArray.length}`);
    // console.log(`w.length=${w.length}`);
    // console.log(`analyseArray[0].type = ${typeof (analyseArray[0])}`);
    for (let j = 0; j < 193; j++) {
        z += w[j] * analyseArray[j];
    }
    z += b;
    // console.log(`z = ${z}`);
    let PR = sigmoid(z);
    // console.log(`The matching rate of realData is ${getFullNum(PR)}(${PR})`);
    return getFullNum(PR);
};

module.exports = {
    matchingFeature
};