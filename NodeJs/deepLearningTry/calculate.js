const w = [0.0054009403704372095, -0.0088514992352005, -0.0357687853586313, 0.002438059614394254, 0.01436151971591946, -0.013358018413691167, 0.021331976553290354, 0.008016100089422627, 0.015174482809441307, -0.008310792938443709, -0.007040985345097761, -0.011352975400370127, 0.05120601161757349, 0.007418074437701168, -0.01025159588737479, -0.0012644447658353391, -0.008218959122675222, 0.0024743509004947766, 0.006449876289055417, -0.008599155832772619, 0.0011146719599502877, -0.0040288331068808894, 0.021428745335826956, 0.0035596344119842973, -0.023644164771291006, -0.006846527054534364, 0.026254859420644407, 0.015964713023297484, 0.07068468118890242, 0.018214217131397294, 0.06375037038204763, 0.10459808129140062, 0.05629462607912037, 0.020269207948226762, 0.033676870861669435, 0.06997345431281202, 0.06156425694081733, 0.03042528946900006, 0.05375049541731015, 0.08631935747043366, 0.05842745481216459, 0.034634417069989085, 0.06017286710459617, 0.07594726718795812, 0.0685479544355773, 0.022901940299831877, 0.041107342658064865, 0.05351136096253857, 0.046107357183286034, 0.0190415739838321, 0.0396023407334514, 0.046601656545277384, 0.05027236186299671, 0.007124256724777854, 8.912119932558665e-05, 0.0222680376723844, 0.02688242140546249, -0.009289590873745644, 0.011359330713761027, 0.021476753813606128, 0.02302577462237477, 0.0063772392065898015, 0.01197349387548106, 0.01233960674029994, 0.01919321895872461, 0.005343755758480464, 0.010678204391375606, 0.011433234154895706, 0.00972900290550326, 0.004006068847502826, 0.009840155870620778, 0.011116790769728832, 0.017308496428512447, 0.002740207172960743, 0.005819377859059538, 0.009895192197317083, 0.006748485636050781, 0.0019434001197159766, 0.0034386521661405114, 0.0046888271510867625, 0.004585153297987297, 0.0009504029440324681, 0.0029462491265006504, 0.0005322256486581807, 0.004295821307026737, 0.0010264351795550674, 0.00019008058880649387, 0.00163469306373585, 0.003566568515180324, 0.0010264351795550674, 0.0006272659430614298, 0.0005702417664194807, 3.8016117761298674e-05, 0.025455583626950464, 0.022404626744815078, 0.0028306047443719556, 0.0025706404600022237, 0.015180910643002745, 0.024313177201684025, 0.0009488069151876716, 0.00011860086439845895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.030124619557208535, 0.030243220421606928, 0.030124619557208535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009488069151876683, 0.0, 0.009488069151876683, 0.0, 0.0002372017287969179, 0.0, 0.005930043219922957, 0.0, 0.0, 0.0, 0.0005930043219922927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00011860086439845895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007590455321501373, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02111095386292573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004782142204240606, -0.0043390883517616975, 0.04593130136235655, 0.012922999266628663, 0.0547731105498619, 0.00436408332072128, 0.03918967369352324, 0.0011276441469039143, 0.10103434147437537, -0.0038754693949904426, 0.024094296535080217, 0.01653328176855911, -0.02546363060377415, -0.008116980321094307, -0.012199203787382849, -0.04307580194665743, 0.020921083255052708, 0.004777419803962114, -0.05915840194397863, 0.006208234622318182, -0.03272117258026061, 0.007720187752100074, 0.0018817418346921484, 0.06218447441872665, -0.015346908325672245, -0.000282046701621769, -0.00135391674082833, 0.026628430150804048, 0.06576225717855023, 0.008197089721560443, -0.008224181674189349, 0.07898468900868674, 0.11688422900181439, 0.016115284554393622, 0.0742057145497611, 0.032220719275777916, 0.020466828580470667, 0.026264193589709023, 0.03833629821186957, 0.0780758322147742, 0.04438315738466924, 0.019625035357036278, 0.058025065852722275, 0.06561298537564375, 0.0669521685881934, 0.017904932405051012, 0.03208058718840629, 0.05366246113378493, 0.015724106186385114, 0.019063630449939112, 0.036431851886571165, 0.04329342421806381, 0.050784331426154176, 0.006199666039686662, -0.0009179468530039102, 0.04346363562105407, 0.038126123223482744, -0.0072258043689592995, 0.010395376424083173, 0.024442938180262802, 0.023393706568595567, 0.006624326608669681, 0.01085699459737573, 0.00896646318125929, 0.015438342244557954, 0.0068834182113243925, 0.00672886218893424, 0.012998728179304994, 0.010134131653760366, 0.002678945366165331, 0.004547748545585736, 0.00613760412587522, 0.006099842007232301, 0.002102509203666016, 0.0031718375801298923, 0.0038914933408878407, 0.0035712657039845075, 0.001168657721429166, 0.0028544619167491527, 0.004113706480394029, 0.002881442692023077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0013046095083830444, 0.0, 0.0, 0.0, 0.0, 0.028820010048825586, 0.0260921901676611, 0.0009488069151876716, 0.00011860086439845895, 0.015180910643002745, 0.024313177201684025, 0.0009488069151876716, 0.00011860086439845895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.030124619557208535, 0.030243220421606928, 0.030124619557208535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009488069151876683, 0.0, 0.009488069151876683, 0.0, 0.0002372017287969179, 0.0, 0.005930043219922957, 0.0, 0.0, 0.0, 0.0005930043219922927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00011860086439845895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007590455321501373, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02111095386292573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
const b = 0.030243220421606865;

let returnInt = (element) => {
    return parseInt(element, 16);
};

let sigmoid = (z) => {
    return 1 / (1 + Math.exp(-z));
};

let getFullNum = (num) => {
    //处理非数字
    if (isNaN(num)) {
        return num
    }
    //处理不需要转换的数字
    let str = '' + num;
    if (!/e/i.test(str)) {
        return num;
    }
    return (num).toFixed(18).replace(/\.?0+$/, "");
};

let matchingFeature = (templetArray, realData) => {
    for (let i = 0; i < templetArray.length; i++) {
        // 将此次识别到的指纹特征值与每一个模板都组成一次analyseData
        let analyseData = `${templetArray[i]} ${realData}`;
        // 将analyseData通过' '由字符串分割成数组
        let analyseArray = analyseData.split(' ');
        // 将analyseArray中字符转换成可计算数字
        analyseArray = analyseArray.map(returnInt);
        // 通过logistic回归(z=wx+b)算出z
        let z = 0;
        // 将此次组成的analyseData与之前训练得到的数据进行计算
        // console.log(`analyseArray.length = ${analyseArray.length}`);
        // console.log(`w.length=${w.length}`);
        // console.log(`analyseArray[0].type = ${typeof (analyseArray[0])}`);
        for (let j = 0; j < 386; j++) {
            z += w[j] * analyseArray[j];
        }
        z += b;
        console.log(`z = ${z}`);
        let PR = sigmoid(z);
        console.log(`The matching rate of realData and ${i}th data is ${getFullNum(PR)}(${PR})`);
    }
};

module.exports = {
    matchingFeature
};